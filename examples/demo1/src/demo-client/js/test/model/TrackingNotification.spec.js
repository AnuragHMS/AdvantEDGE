/**
 * MEEP Demo App API
 * Copyright (c) 2019  InterDigital Communications, Inc Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at      http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. 
 *
 * OpenAPI spec version: 0.0.1
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MeepDemoAppApi);
  }
}(this, function(expect, MeepDemoAppApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MeepDemoAppApi.TrackingNotification();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('TrackingNotification', function() {
    it('should create an instance of TrackingNotification', function() {
      // uncomment below and update the code to test TrackingNotification
      //var instane = new MeepDemoAppApi.TrackingNotification();
      //expect(instance).to.be.a(MeepDemoAppApi.TrackingNotification);
    });

    it('should have the property callbackData (base name: "callbackData")', function() {
      // uncomment below and update the code to test the property callbackData
      //var instane = new MeepDemoAppApi.TrackingNotification();
      //expect(instance).to.be();
    });

    it('should have the property zoneId (base name: "zoneId")', function() {
      // uncomment below and update the code to test the property zoneId
      //var instane = new MeepDemoAppApi.TrackingNotification();
      //expect(instance).to.be();
    });

    it('should have the property address (base name: "address")', function() {
      // uncomment below and update the code to test the property address
      //var instane = new MeepDemoAppApi.TrackingNotification();
      //expect(instance).to.be();
    });

    it('should have the property interestRealm (base name: "interestRealm")', function() {
      // uncomment below and update the code to test the property interestRealm
      //var instane = new MeepDemoAppApi.TrackingNotification();
      //expect(instance).to.be();
    });

    it('should have the property userEventType (base name: "userEventType")', function() {
      // uncomment below and update the code to test the property userEventType
      //var instane = new MeepDemoAppApi.TrackingNotification();
      //expect(instance).to.be();
    });

    it('should have the property currentAccessPointId (base name: "currentAccessPointId")', function() {
      // uncomment below and update the code to test the property currentAccessPointId
      //var instane = new MeepDemoAppApi.TrackingNotification();
      //expect(instance).to.be();
    });

    it('should have the property previousAccessPointId (base name: "previousAccessPointId")', function() {
      // uncomment below and update the code to test the property previousAccessPointId
      //var instane = new MeepDemoAppApi.TrackingNotification();
      //expect(instance).to.be();
    });

    it('should have the property timestamp (base name: "timestamp")', function() {
      // uncomment below and update the code to test the property timestamp
      //var instane = new MeepDemoAppApi.TrackingNotification();
      //expect(instance).to.be();
    });

  });

}));

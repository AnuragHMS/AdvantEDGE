/*
 * MEEP Controller REST API
 * Copyright (c) 2019  InterDigital Communications, Inc Licensed under the Apache License, Version 2.0 (the \"License\"); you may not use this file except in compliance with the License. You may obtain a copy of the License at      http://www.apache.org/licenses/LICENSE-2.0  Unless required by applicable law or agreed to in writing, software distributed under the License is distributed on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied. See the License for the specific language governing permissions and limitations under the License. 
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.4.9
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MeepControllerRestApi);
  }
}(this, function(expect, MeepControllerRestApi) {
  'use strict';

  var instance;

  describe('(package)', function() {
    describe('NetworkLocation', function() {
      beforeEach(function() {
        instance = new MeepControllerRestApi.NetworkLocation();
      });

      it('should create an instance of NetworkLocation', function() {
        // TODO: update the code to test NetworkLocation
        expect(instance).to.be.a(MeepControllerRestApi.NetworkLocation);
      });

      it('should have the property id (base name: "id")', function() {
        // TODO: update the code to test the property id
        expect(instance).to.have.property('id');
        // expect(instance.id).to.be(expectedValueLiteral);
      });

      it('should have the property name (base name: "name")', function() {
        // TODO: update the code to test the property name
        expect(instance).to.have.property('name');
        // expect(instance.name).to.be(expectedValueLiteral);
      });

      it('should have the property type (base name: "type")', function() {
        // TODO: update the code to test the property type
        expect(instance).to.have.property('type');
        // expect(instance.type).to.be(expectedValueLiteral);
      });

      it('should have the property terminalLinkLatency (base name: "terminalLinkLatency")', function() {
        // TODO: update the code to test the property terminalLinkLatency
        expect(instance).to.have.property('terminalLinkLatency');
        // expect(instance.terminalLinkLatency).to.be(expectedValueLiteral);
      });

      it('should have the property terminalLinkLatencyVariation (base name: "terminalLinkLatencyVariation")', function() {
        // TODO: update the code to test the property terminalLinkLatencyVariation
        expect(instance).to.have.property('terminalLinkLatencyVariation');
        // expect(instance.terminalLinkLatencyVariation).to.be(expectedValueLiteral);
      });

      it('should have the property terminalLinkThroughput (base name: "terminalLinkThroughput")', function() {
        // TODO: update the code to test the property terminalLinkThroughput
        expect(instance).to.have.property('terminalLinkThroughput');
        // expect(instance.terminalLinkThroughput).to.be(expectedValueLiteral);
      });

      it('should have the property terminalLinkPacketLoss (base name: "terminalLinkPacketLoss")', function() {
        // TODO: update the code to test the property terminalLinkPacketLoss
        expect(instance).to.have.property('terminalLinkPacketLoss');
        // expect(instance.terminalLinkPacketLoss).to.be(expectedValueLiteral);
      });

      it('should have the property meta (base name: "meta")', function() {
        // TODO: update the code to test the property meta
        expect(instance).to.have.property('meta');
        // expect(instance.meta).to.be(expectedValueLiteral);
      });

      it('should have the property userMeta (base name: "userMeta")', function() {
        // TODO: update the code to test the property userMeta
        expect(instance).to.have.property('userMeta');
        // expect(instance.userMeta).to.be(expectedValueLiteral);
      });

      it('should have the property physicalLocations (base name: "physicalLocations")', function() {
        // TODO: update the code to test the property physicalLocations
        expect(instance).to.have.property('physicalLocations');
        // expect(instance.physicalLocations).to.be(expectedValueLiteral);
      });

    });
  });

}));

/**
 * MEEP Controller REST API
 * Copyright (c) 2019 InterDigital Communications, Inc. All rights reserved. The information provided herein is the proprietary and confidential information of InterDigital Communications, Inc. 
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD.
    define(['expect.js', '../../src/index'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    factory(require('expect.js'), require('../../src/index'));
  } else {
    // Browser globals (root is window)
    factory(root.expect, root.MeepControllerRestApi);
  }
}(this, function(expect, MeepControllerRestApi) {
  'use strict';

  var instance;

  beforeEach(function() {
    instance = new MeepControllerRestApi.Zone();
  });

  var getProperty = function(object, getter, property) {
    // Use getter method if present; otherwise, get the property directly.
    if (typeof object[getter] === 'function')
      return object[getter]();
    else
      return object[property];
  }

  var setProperty = function(object, setter, property, value) {
    // Use setter method if present; otherwise, set the property directly.
    if (typeof object[setter] === 'function')
      object[setter](value);
    else
      object[property] = value;
  }

  describe('Zone', function() {
    it('should create an instance of Zone', function() {
      // uncomment below and update the code to test Zone
      //var instane = new MeepControllerRestApi.Zone();
      //expect(instance).to.be.a(MeepControllerRestApi.Zone);
    });

    it('should have the property id (base name: "id")', function() {
      // uncomment below and update the code to test the property id
      //var instane = new MeepControllerRestApi.Zone();
      //expect(instance).to.be();
    });

    it('should have the property name (base name: "name")', function() {
      // uncomment below and update the code to test the property name
      //var instane = new MeepControllerRestApi.Zone();
      //expect(instance).to.be();
    });

    it('should have the property type (base name: "type")', function() {
      // uncomment below and update the code to test the property type
      //var instane = new MeepControllerRestApi.Zone();
      //expect(instance).to.be();
    });

    it('should have the property interFogLatency (base name: "interFogLatency")', function() {
      // uncomment below and update the code to test the property interFogLatency
      //var instane = new MeepControllerRestApi.Zone();
      //expect(instance).to.be();
    });

    it('should have the property interFogLatencyVariation (base name: "interFogLatencyVariation")', function() {
      // uncomment below and update the code to test the property interFogLatencyVariation
      //var instane = new MeepControllerRestApi.Zone();
      //expect(instance).to.be();
    });

    it('should have the property interFogThroughput (base name: "interFogThroughput")', function() {
      // uncomment below and update the code to test the property interFogThroughput
      //var instane = new MeepControllerRestApi.Zone();
      //expect(instance).to.be();
    });

    it('should have the property interFogPacketLoss (base name: "interFogPacketLoss")', function() {
      // uncomment below and update the code to test the property interFogPacketLoss
      //var instane = new MeepControllerRestApi.Zone();
      //expect(instance).to.be();
    });

    it('should have the property interEdgeLatency (base name: "interEdgeLatency")', function() {
      // uncomment below and update the code to test the property interEdgeLatency
      //var instane = new MeepControllerRestApi.Zone();
      //expect(instance).to.be();
    });

    it('should have the property interEdgeLatencyVariation (base name: "interEdgeLatencyVariation")', function() {
      // uncomment below and update the code to test the property interEdgeLatencyVariation
      //var instane = new MeepControllerRestApi.Zone();
      //expect(instance).to.be();
    });

    it('should have the property interEdgeThroughput (base name: "interEdgeThroughput")', function() {
      // uncomment below and update the code to test the property interEdgeThroughput
      //var instane = new MeepControllerRestApi.Zone();
      //expect(instance).to.be();
    });

    it('should have the property interEdgePacketLoss (base name: "interEdgePacketLoss")', function() {
      // uncomment below and update the code to test the property interEdgePacketLoss
      //var instane = new MeepControllerRestApi.Zone();
      //expect(instance).to.be();
    });

    it('should have the property edgeFogLatency (base name: "edgeFogLatency")', function() {
      // uncomment below and update the code to test the property edgeFogLatency
      //var instane = new MeepControllerRestApi.Zone();
      //expect(instance).to.be();
    });

    it('should have the property edgeFogLatencyVariation (base name: "edgeFogLatencyVariation")', function() {
      // uncomment below and update the code to test the property edgeFogLatencyVariation
      //var instane = new MeepControllerRestApi.Zone();
      //expect(instance).to.be();
    });

    it('should have the property edgeFogThroughput (base name: "edgeFogThroughput")', function() {
      // uncomment below and update the code to test the property edgeFogThroughput
      //var instane = new MeepControllerRestApi.Zone();
      //expect(instance).to.be();
    });

    it('should have the property edgeFogPacketLoss (base name: "edgeFogPacketLoss")', function() {
      // uncomment below and update the code to test the property edgeFogPacketLoss
      //var instane = new MeepControllerRestApi.Zone();
      //expect(instance).to.be();
    });

    it('should have the property meta (base name: "meta")', function() {
      // uncomment below and update the code to test the property meta
      //var instane = new MeepControllerRestApi.Zone();
      //expect(instance).to.be();
    });

    it('should have the property networkLocations (base name: "networkLocations")', function() {
      // uncomment below and update the code to test the property networkLocations
      //var instane = new MeepControllerRestApi.Zone();
      //expect(instance).to.be();
    });

  });

}));

/**
 * Metrics Engine Service API
 * This is Metrics Engine Services API
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(root, factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/DataResponseList', 'model/InlineResponse200'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('../ApiClient'), require('../model/DataResponseList'), require('../model/InlineResponse200'));
  } else {
    // Browser globals (root is window)
    if (!root.MetricsEngineServiceApi) {
      root.MetricsEngineServiceApi = {};
    }
    root.MetricsEngineServiceApi.MetricsApi = factory(root.MetricsEngineServiceApi.ApiClient, root.MetricsEngineServiceApi.DataResponseList, root.MetricsEngineServiceApi.InlineResponse200);
  }
}(this, function(ApiClient, DataResponseList, InlineResponse200) {
  'use strict';

  /**
   * Metrics service.
   * @module api/MetricsApi
   * @version 1.0.0
   */

  /**
   * Constructs a new MetricsApi. 
   * @alias module:api/MetricsApi
   * @class
   * @param {module:ApiClient} [apiClient] Optional API client implementation to use,
   * default to {@link module:ApiClient#instance} if unspecified.
   */
  var exports = function(apiClient) {
    this.apiClient = apiClient || ApiClient.instance;


    /**
     * Callback function to receive the result of the metricsGet operation.
     * @callback module:api/MetricsApi~metricsGetCallback
     * @param {String} error Error message, if any.
     * @param {module:model/InlineResponse200} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Used to get a list of all metrics 
     * @param {Object} opts Optional parameters
     * @param {String} opts.startTime Starting timestamp of time range
     * @param {String} opts.stopTime Ending timestamp of time range
     * @param {module:api/MetricsApi~metricsGetCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/InlineResponse200}
     */
    this.metricsGet = function(opts, callback) {
      opts = opts || {};
      var postBody = null;


      var pathParams = {
      };
      var queryParams = {
        'startTime': opts['startTime'],
        'stopTime': opts['stopTime'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = InlineResponse200;

      return this.apiClient.callApi(
        '/metrics', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the metricsGetByDataType operation.
     * @callback module:api/MetricsApi~metricsGetByDataTypeCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataResponseList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Used to get a list of all metrics for a specific message type
     * @param {String} dataType Log Message Type
     * @param {Object} opts Optional parameters
     * @param {String} opts.startTime Starting timestamp of time range
     * @param {String} opts.stopTime Ending timestamp of time range
     * @param {module:api/MetricsApi~metricsGetByDataTypeCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataResponseList}
     */
    this.metricsGetByDataType = function(dataType, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'dataType' is set
      if (dataType === undefined || dataType === null) {
        throw new Error("Missing the required parameter 'dataType' when calling metricsGetByDataType");
      }


      var pathParams = {
        'dataType': dataType
      };
      var queryParams = {
        'startTime': opts['startTime'],
        'stopTime': opts['stopTime'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DataResponseList;

      return this.apiClient.callApi(
        '/metrics/{dataType}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the metricsGetByDataTypeByDest operation.
     * @callback module:api/MetricsApi~metricsGetByDataTypeByDestCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataResponseList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Used to get a list of all metrics for a specific message type and destination pod combination
     * @param {String} dataType Log Message Type
     * @param {String} dest Pod where the log message is taken from
     * @param {Object} opts Optional parameters
     * @param {String} opts.startTime Starting timestamp of time range
     * @param {String} opts.stopTime Ending timestamp of time range
     * @param {module:api/MetricsApi~metricsGetByDataTypeByDestCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataResponseList}
     */
    this.metricsGetByDataTypeByDest = function(dataType, dest, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'dataType' is set
      if (dataType === undefined || dataType === null) {
        throw new Error("Missing the required parameter 'dataType' when calling metricsGetByDataTypeByDest");
      }

      // verify the required parameter 'dest' is set
      if (dest === undefined || dest === null) {
        throw new Error("Missing the required parameter 'dest' when calling metricsGetByDataTypeByDest");
      }


      var pathParams = {
        'dataType': dataType,
        'dest': dest
      };
      var queryParams = {
        'startTime': opts['startTime'],
        'stopTime': opts['stopTime'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DataResponseList;

      return this.apiClient.callApi(
        '/metrics/{dataType}/{dest}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }

    /**
     * Callback function to receive the result of the metricsGetByTypeByDestBySrc operation.
     * @callback module:api/MetricsApi~metricsGetByTypeByDestBySrcCallback
     * @param {String} error Error message, if any.
     * @param {module:model/DataResponseList} data The data returned by the service call.
     * @param {String} response The complete HTTP response.
     */

    /**
     * Used to get a list of all metrics for a specific message type, destination pd and source pod combination
     * @param {String} dest Pod where the log message is taken from
     * @param {String} dataType Log Message Type
     * @param {String} src Pod that originated the metrics logged in the message
     * @param {Object} opts Optional parameters
     * @param {String} opts.starTime Starting timestamp of time range
     * @param {String} opts.stopTime Ending timestamp of time range
     * @param {module:api/MetricsApi~metricsGetByTypeByDestBySrcCallback} callback The callback function, accepting three arguments: error, data, response
     * data is of type: {@link module:model/DataResponseList}
     */
    this.metricsGetByTypeByDestBySrc = function(dest, dataType, src, opts, callback) {
      opts = opts || {};
      var postBody = null;

      // verify the required parameter 'dest' is set
      if (dest === undefined || dest === null) {
        throw new Error("Missing the required parameter 'dest' when calling metricsGetByTypeByDestBySrc");
      }

      // verify the required parameter 'dataType' is set
      if (dataType === undefined || dataType === null) {
        throw new Error("Missing the required parameter 'dataType' when calling metricsGetByTypeByDestBySrc");
      }

      // verify the required parameter 'src' is set
      if (src === undefined || src === null) {
        throw new Error("Missing the required parameter 'src' when calling metricsGetByTypeByDestBySrc");
      }


      var pathParams = {
        'dest': dest,
        'dataType': dataType,
        'src': src
      };
      var queryParams = {
        'starTime': opts['starTime'],
        'stopTime': opts['stopTime'],
      };
      var collectionQueryParams = {
      };
      var headerParams = {
      };
      var formParams = {
      };

      var authNames = [];
      var contentTypes = ['application/json'];
      var accepts = ['application/json'];
      var returnType = DataResponseList;

      return this.apiClient.callApi(
        '/metrics/{dataType}/{dest}/{src}', 'GET',
        pathParams, queryParams, collectionQueryParams, headerParams, formParams, postBody,
        authNames, contentTypes, accepts, returnType, callback
      );
    }
  };

  return exports;
}));

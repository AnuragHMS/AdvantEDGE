/**
 * Metrics Engine Service API
 * This is Metrics Engine Services API
 *
 * OpenAPI spec version: 1.0.0
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 *
 * Swagger Codegen version: 2.3.1
 *
 * Do not edit the class manually.
 *
 */

(function(factory) {
  if (typeof define === 'function' && define.amd) {
    // AMD. Register as an anonymous module.
    define(['ApiClient', 'model/DataResponse', 'model/DataResponseData', 'model/DataResponseList', 'model/DataType', 'model/Dest', 'model/InlineResponse200', 'model/Src', 'api/MetricsApi'], factory);
  } else if (typeof module === 'object' && module.exports) {
    // CommonJS-like environments that support module.exports, like Node.
    module.exports = factory(require('./ApiClient'), require('./model/DataResponse'), require('./model/DataResponseData'), require('./model/DataResponseList'), require('./model/DataType'), require('./model/Dest'), require('./model/InlineResponse200'), require('./model/Src'), require('./api/MetricsApi'));
  }
}(function(ApiClient, DataResponse, DataResponseData, DataResponseList, DataType, Dest, InlineResponse200, Src, MetricsApi) {
  'use strict';

  /**
   * This_is_Metrics_Engine_Services_API.<br>
   * The <code>index</code> module provides access to constructors for all the classes which comprise the public API.
   * <p>
   * An AMD (recommended!) or CommonJS application will generally do something equivalent to the following:
   * <pre>
   * var MetricsEngineServiceApi = require('index'); // See note below*.
   * var xxxSvc = new MetricsEngineServiceApi.XxxApi(); // Allocate the API class we're going to use.
   * var yyyModel = new MetricsEngineServiceApi.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * <em>*NOTE: For a top-level AMD script, use require(['index'], function(){...})
   * and put the application logic within the callback function.</em>
   * </p>
   * <p>
   * A non-AMD browser application (discouraged) might do something like this:
   * <pre>
   * var xxxSvc = new MetricsEngineServiceApi.XxxApi(); // Allocate the API class we're going to use.
   * var yyy = new MetricsEngineServiceApi.Yyy(); // Construct a model instance.
   * yyyModel.someProperty = 'someValue';
   * ...
   * var zzz = xxxSvc.doSomething(yyyModel); // Invoke the service.
   * ...
   * </pre>
   * </p>
   * @module index
   * @version 1.0.0
   */
  var exports = {
    /**
     * The ApiClient constructor.
     * @property {module:ApiClient}
     */
    ApiClient: ApiClient,
    /**
     * The DataResponse model constructor.
     * @property {module:model/DataResponse}
     */
    DataResponse: DataResponse,
    /**
     * The DataResponseData model constructor.
     * @property {module:model/DataResponseData}
     */
    DataResponseData: DataResponseData,
    /**
     * The DataResponseList model constructor.
     * @property {module:model/DataResponseList}
     */
    DataResponseList: DataResponseList,
    /**
     * The DataType model constructor.
     * @property {module:model/DataType}
     */
    DataType: DataType,
    /**
     * The Dest model constructor.
     * @property {module:model/Dest}
     */
    Dest: Dest,
    /**
     * The InlineResponse200 model constructor.
     * @property {module:model/InlineResponse200}
     */
    InlineResponse200: InlineResponse200,
    /**
     * The Src model constructor.
     * @property {module:model/Src}
     */
    Src: Src,
    /**
     * The MetricsApi service constructor.
     * @property {module:api/MetricsApi}
     */
    MetricsApi: MetricsApi
  };

  return exports;
}));

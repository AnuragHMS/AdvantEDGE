/*
 * Copyright (c) 2020  InterDigital Communications, Inc
 *
 * Licensed under the Apache License, Version 2.0 (the \"License\");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an \"AS IS\" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * AdvantEDGE GIS Engine REST API
 *
 * This API allows to control geo-spatial behavior and simulation. <p>**Micro-service**<br>[meep-gis-engine](https://github.com/InterDigitalInc/AdvantEDGE/tree/master/go-apps/meep-gis-engine) <p>**Type & Usage**<br>Platform runtime interface to control geo-spatial behavior and simulation <p>**Details**<br>API details available at _your-AdvantEDGE-ip-address/api_
 *
 * API version: 1.0.0
 * Contact: AdvantEDGE@InterDigital.com
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package server

import (
	"fmt"
	"net/http"
	"strings"

	"github.com/gorilla/mux"

	ss "github.com/InterDigitalInc/AdvantEDGE/go-packages/meep-sessions"
)

type Route struct {
	Name        string
	Method      string
	Pattern     string
	HandlerFunc http.HandlerFunc
	AccessType  string
}

type Routes []Route

func NewRouter(accessMap map[string]string) *mux.Router {
	router := mux.NewRouter().StrictSlash(true)
	for _, route := range routes {
		var handler http.Handler = route.HandlerFunc
		handler = Logger(handler, route.Name)

		// Authorization
		accessType, found := accessMap[route.Name]
		if !found {
			accessType = route.AccessType
		}

		if accessType == ss.AccessBlock {
			handler = ge.sessionStore.AccessBlocker(handler)
		} else if accessType == ss.AccessVerify {
			handler = ge.sessionStore.AccessVerifier(handler)
		}

		router.
			Methods(route.Method).
			Path(route.Pattern).
			Name(route.Name).
			Handler(handler)
	}

	return router
}

func Index(w http.ResponseWriter, r *http.Request) {
	fmt.Fprintf(w, "Hello World!")
}

var routes = Routes{
	Route{
		"Index",
		"GET",
		"/gis/v1/",
		Index,
		ss.AccessGrant,
	},

	Route{
		"GetAutomationState",
		strings.ToUpper("Get"),
		"/gis/v1/automation",
		GetAutomationState,
		ss.AccessGrant,
	},

	Route{
		"GetAutomationStateByName",
		strings.ToUpper("Get"),
		"/gis/v1/automation/{type}",
		GetAutomationStateByName,
		ss.AccessGrant,
	},

	Route{
		"SetAutomationStateByName",
		strings.ToUpper("Post"),
		"/gis/v1/automation/{type}",
		SetAutomationStateByName,
		ss.AccessGrant,
	},

	Route{
		"DeleteGeoDataByName",
		strings.ToUpper("Delete"),
		"/gis/v1/geodata/{assetName}",
		DeleteGeoDataByName,
		ss.AccessGrant,
	},

	Route{
		"GetAssetData",
		strings.ToUpper("Get"),
		"/gis/v1/geodata",
		GetAssetData,
		ss.AccessGrant,
	},

	Route{
		"GetGeoDataByName",
		strings.ToUpper("Get"),
		"/gis/v1/geodata/{assetName}",
		GetGeoDataByName,
		ss.AccessGrant,
	},

	Route{
		"UpdateGeoDataByName",
		strings.ToUpper("Post"),
		"/gis/v1/geodata/{assetName}",
		UpdateGeoDataByName,
		ss.AccessGrant,
	},
}

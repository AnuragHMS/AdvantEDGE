/*
 * Copyright (c) 2020  InterDigital Communications, Inc
 *
 * Licensed under the Apache License, Version 2.0 (the \"License\");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an \"AS IS\" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 * RNI API
 *
 * The ETSI MEC ISG MEC012 Radio Network Information API described using OpenAPI
 *
 * API version: 1.1.1
 * Generated by: Swagger Codegen (https://github.com/swagger-api/swagger-codegen.git)
 */

package server

import (
	"net/http"
)

func CaReConfSubscriptionSubscriptionsGET(w http.ResponseWriter, r *http.Request) {
	notImplemented(w, r)
}

func CaReConfSubscriptionSubscriptionsPOST(w http.ResponseWriter, r *http.Request) {
	notImplemented(w, r)
}

func CaReConfSubscriptionSubscriptionsPUT(w http.ResponseWriter, r *http.Request) {
	notImplemented(w, r)
}

func CaReConfSubscriptionsSubscrIdDELETE(w http.ResponseWriter, r *http.Request) {
	notImplemented(w, r)
}

func CellChangeSubscriptionsGET(w http.ResponseWriter, r *http.Request) {
	cellChangeSubscriptionsGET(w, r)
}

func CellChangeSubscriptionsPOST(w http.ResponseWriter, r *http.Request) {
	cellChangeSubscriptionsPOST(w, r)
}

func CellChangeSubscriptionsPUT(w http.ResponseWriter, r *http.Request) {
	cellChangeSubscriptionsPUT(w, r)
}

func CellChangeSubscriptionsSubscrIdDELETE(w http.ResponseWriter, r *http.Request) {
	cellChangeSubscriptionsDELETE(w, r)
}

func MeasRepUeReportSubscriptionsPUT(w http.ResponseWriter, r *http.Request) {
	measRepUeReportSubscriptionsPUT(w, r)
}

func MeasRepUeSubscriptionsGET(w http.ResponseWriter, r *http.Request) {
	measRepUeReportSubscriptionsGET(w, r)
}

func MeasRepUeSubscriptionsPOST(w http.ResponseWriter, r *http.Request) {
	measRepUeReportSubscriptionsPOST(w, r)
}

func MeasRepUeSubscriptionsSubscrIdDELETE(w http.ResponseWriter, r *http.Request) {
	measRepUeReportSubscriptionsDELETE(w, r)
}

func MeasTaSubscriptionsGET(w http.ResponseWriter, r *http.Request) {
	notImplemented(w, r)
}

func MeasTaSubscriptionsPOST(w http.ResponseWriter, r *http.Request) {
	notImplemented(w, r)
}

func MeasTaSubscriptionsPUT(w http.ResponseWriter, r *http.Request) {
	notImplemented(w, r)
}

func MeasTaSubscriptionsSubscrIdDELETE(w http.ResponseWriter, r *http.Request) {
	notImplemented(w, r)
}

func PlmnInfoGET(w http.ResponseWriter, r *http.Request) {
	plmnInfoGET(w, r)
}

func RabEstSubscriptionSubscriptionsGET(w http.ResponseWriter, r *http.Request) {
	notImplemented(w, r)
}

func RabEstSubscriptionSubscriptionsPOST(w http.ResponseWriter, r *http.Request) {
	notImplemented(w, r)
}

func RabEstSubscriptionSubscriptionsPUT(w http.ResponseWriter, r *http.Request) {
	notImplemented(w, r)
}

func RabEstSubscriptionsSubscrIdDELETE(w http.ResponseWriter, r *http.Request) {
	notImplemented(w, r)
}

func RabInfoGET(w http.ResponseWriter, r *http.Request) {
	notImplemented(w, r)
}

func RabModSubscriptionSubscriptionsGET(w http.ResponseWriter, r *http.Request) {
	notImplemented(w, r)
}

func RabModSubscriptionSubscriptionsPOST(w http.ResponseWriter, r *http.Request) {
	notImplemented(w, r)
}

func RabModSubscriptionSubscriptionsPUT(w http.ResponseWriter, r *http.Request) {
	notImplemented(w, r)
}

func RabModSubscriptionsSubscrIdDELETE(w http.ResponseWriter, r *http.Request) {
	notImplemented(w, r)
}

func RabRelSubscriptionSubscriptionsGET(w http.ResponseWriter, r *http.Request) {
	notImplemented(w, r)
}

func RabRelSubscriptionSubscriptionsPOST(w http.ResponseWriter, r *http.Request) {
	notImplemented(w, r)
}

func RabRelSubscriptionSubscriptionsPUT(w http.ResponseWriter, r *http.Request) {
	notImplemented(w, r)
}

func RabRelSubscriptionsSubscrIdDELETE(w http.ResponseWriter, r *http.Request) {
	notImplemented(w, r)
}

func S1BearerInfoGET(w http.ResponseWriter, r *http.Request) {
	notImplemented(w, r)
}

func S1BearerSubscriptionSubscriptionsGET(w http.ResponseWriter, r *http.Request) {
	notImplemented(w, r)
}

func S1BearerSubscriptionSubscriptionsPOST(w http.ResponseWriter, r *http.Request) {
	notImplemented(w, r)
}

func S1BearerSubscriptionSubscriptionsPUT(w http.ResponseWriter, r *http.Request) {
	notImplemented(w, r)
}

func S1BearerSubscriptionsSubscrIdDELETE(w http.ResponseWriter, r *http.Request) {
	notImplemented(w, r)
}

func SubscriptionLinkListSubscriptionsCcGET(w http.ResponseWriter, r *http.Request) {
	subscriptionLinkListSubscriptionsCcGET(w, r)
}

func SubscriptionLinkListSubscriptionsCrGET(w http.ResponseWriter, r *http.Request) {
	notImplemented(w, r)
}

func SubscriptionLinkListSubscriptionsGET(w http.ResponseWriter, r *http.Request) {
	subscriptionLinkListSubscriptionsGET(w, r)
}

func SubscriptionLinkListSubscriptionsMrGET(w http.ResponseWriter, r *http.Request) {
	subscriptionLinkListSubscriptionsMrGET(w, r)
}

func SubscriptionLinkListSubscriptionsReGET(w http.ResponseWriter, r *http.Request) {
	notImplemented(w, r)
}

func SubscriptionLinkListSubscriptionsRmGET(w http.ResponseWriter, r *http.Request) {
	notImplemented(w, r)
}

func SubscriptionLinkListSubscriptionsRrGET(w http.ResponseWriter, r *http.Request) {
	notImplemented(w, r)
}

func SubscriptionLinkListSubscriptionsS1GET(w http.ResponseWriter, r *http.Request) {
	notImplemented(w, r)
}

func SubscriptionLinkListSubscriptionsTaGET(w http.ResponseWriter, r *http.Request) {
	notImplemented(w, r)
}

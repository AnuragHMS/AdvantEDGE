---
swagger: "2.0"
info:
  description: "Copyright (c) 2019  InterDigital Communications, Inc\nLicensed under\
    \ the Apache License, Version 2.0 (the \"License\"); you may not use this file\
    \ except in compliance with the License. You may obtain a copy of the License\
    \ at\n\n    http://www.apache.org/licenses/LICENSE-2.0\n\nUnless required by applicable\
    \ law or agreed to in writing, software distributed under the License is distributed\
    \ on an \"AS IS\" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either\
    \ express or implied. See the License for the specific language governing permissions\
    \ and limitations under the License.\n"
  version: "1.0.0"
  title: "MEEP Controller REST API"
  license:
    name: "Apache 2.0"
    url: "http://www.apache.org/licenses/LICENSE-2.0"
basePath: "/v1"
tags:
- name: "Scenario Configuration"
- name: "Scenario Execution"
- name: "MEEP Settings"
- name: "Pod States"
schemes:
- "http"
paths:
  /scenarios:
    get:
      tags:
      - "Scenario Configuration"
      summary: "Retrieve list of scenarios in MEEP store"
      description: ""
      operationId: "getScenarioList"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/ScenarioList"
        404:
          description: "Not found"
    delete:
      tags:
      - "Scenario Configuration"
      summary: "Delete all scenarios in MEEP store"
      description: ""
      operationId: "deleteScenarioList"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "OK"
        404:
          description: "Not found"
  /scenarios/{name}:
    get:
      tags:
      - "Scenario Configuration"
      summary: "Retrieve scenario from MEEP store"
      description: ""
      operationId: "getScenario"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "Scenario name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Scenario"
        400:
          description: "Bad request"
        404:
          description: "Not found"
    post:
      tags:
      - "Scenario Configuration"
      summary: "Add new scenario to MEEP store"
      description: ""
      operationId: "createScenario"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "Scenario name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - in: "body"
        name: "scenario"
        description: "Scenario to add to MEEP store"
        required: true
        schema:
          $ref: "#/definitions/Scenario"
        x-exportParamName: "Scenario"
      responses:
        200:
          description: "OK"
        400:
          description: "Bad request"
        404:
          description: "Not found"
    put:
      tags:
      - "Scenario Configuration"
      summary: "Update scenario in MEEP store"
      description: ""
      operationId: "setScenario"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "Scenario name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      - in: "body"
        name: "scenario"
        description: "Scenario to add to MEEP store"
        required: true
        schema:
          $ref: "#/definitions/Scenario"
        x-exportParamName: "Scenario"
      responses:
        200:
          description: "OK"
        400:
          description: "Bad request"
        404:
          description: "Not found"
    delete:
      tags:
      - "Scenario Configuration"
      summary: "Delete scenario from MEEP store"
      description: ""
      operationId: "deleteScenario"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "Scenario name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      responses:
        200:
          description: "OK"
        400:
          description: "Bad request"
        404:
          description: "Not found"
  /active:
    get:
      tags:
      - "Scenario Execution"
      summary: "Retrieve active (deployed) scenario"
      description: ""
      operationId: "getActiveScenario"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Scenario"
    delete:
      tags:
      - "Scenario Execution"
      summary: "Terminate active (deployed) scenario"
      description: ""
      operationId: "terminateScenario"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "OK"
        404:
          description: "Not found"
  /active/{name}:
    post:
      tags:
      - "Scenario Execution"
      summary: "Activate (deploy) scenario"
      description: ""
      operationId: "activateScenario"
      produces:
      - "application/json"
      parameters:
      - name: "name"
        in: "path"
        description: "Scenario name"
        required: true
        type: "string"
        x-exportParamName: "Name"
      responses:
        200:
          description: "OK"
        400:
          description: "Bad request"
        404:
          description: "Not found"
  /active/serviceMaps:
    get:
      tags:
      - "Scenario Execution"
      summary: "Retrieve list of active external node service mappings"
      description: ""
      operationId: "getActiveNodeServiceMaps"
      produces:
      - "application/json"
      parameters:
      - name: "node"
        in: "query"
        description: "Unique node identifier"
        required: false
        type: "string"
        x-exportParamName: "Node"
      - name: "type"
        in: "query"
        description: "Exposed service type (ingress or egress)"
        required: false
        type: "string"
        x-exportParamName: "Type_"
      - name: "service"
        in: "query"
        description: "Exposed service name"
        required: false
        type: "string"
        x-exportParamName: "Service"
      responses:
        200:
          description: "OK"
          schema:
            type: "array"
            items:
              $ref: "#/definitions/NodeServiceMaps"
        404:
          description: "Not found"
  /events:
    get:
      tags:
      - "Scenario Execution"
      summary: "Retrieve list of supported event types for active (deployed) scenario"
      description: ""
      operationId: "getEventList"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/EventList"
        404:
          description: "Not found"
  /events/{type}:
    post:
      tags:
      - "Scenario Execution"
      summary: "Send event to active (deployed) scenario"
      description: ""
      operationId: "sendEvent"
      produces:
      - "application/json"
      parameters:
      - name: "type"
        in: "path"
        description: "Event type"
        required: true
        type: "string"
        x-exportParamName: "Type_"
      - in: "body"
        name: "event"
        description: "Event to send to active scenario"
        required: true
        schema:
          $ref: "#/definitions/Event"
        x-exportParamName: "Event"
      responses:
        200:
          description: "OK"
        400:
          description: "Bad request"
  /settings:
    get:
      tags:
      - "MEEP Settings"
      summary: "Retrieve MEEP Controller settings"
      description: ""
      operationId: "getMeepSettings"
      produces:
      - "application/json"
      parameters: []
      responses:
        200:
          description: "OK"
          schema:
            $ref: "#/definitions/Settings"
        400:
          description: "Bad request"
        404:
          description: "Not found"
    put:
      tags:
      - "MEEP Settings"
      summary: "Set MEEP Controller settings"
      description: ""
      operationId: "setMeepSettings"
      produces:
      - "application/json"
      parameters:
      - in: "body"
        name: "settings"
        description: "MEEP Settings"
        required: true
        schema:
          $ref: "#/definitions/Settings"
        x-exportParamName: "Settings"
      responses:
        200:
          description: "OK"
        400:
          description: "Bad request"
        404:
          description: "Not found"
  /states:
    get:
      tags:
      - "Pod States"
      summary: "This operation returns status information for pods"
      description: "Returns pod status info for a list of pods"
      operationId: "getStates"
      produces:
      - "application/json"
      parameters:
      - name: "long"
        in: "query"
        description: "Enables detailed stats if true"
        required: false
        type: "string"
        x-exportParamName: "Long"
      - name: "type"
        in: "query"
        description: "Pod type"
        required: false
        type: "string"
        x-exportParamName: "Type_"
      responses:
        200:
          description: "successful operation"
          schema:
            $ref: "#/definitions/PodsStatus"
          examples:
            application/json:
              podsStatus:
              - podName: "mypod"
                namespace: "default"
                meepApp: "pod1"
                meepOrigin: "scenario"
                meepScenario: "myScenario"
                phase: "Running"
                podInitialized: "True"
                podReady: "False"
                podScheduled: "True"
                podUnschedulable: "False"
                podConditionError: "containers with unready status: [myshel]"
                containerStatusesMsg: null
                nbOkContainers: "0"
                nbTotalContainers: "1"
                nbPodRestart: "15005"
                logicalState: "Terminating"
                startTime: "2018-09-10 14:24:00 +0000 UTC"
definitions:
  ScenarioList:
    type: "object"
    properties:
      scenarios:
        type: "array"
        items:
          $ref: "#/definitions/Scenario"
    description: "Scenario list object"
    example: {}
  Scenario:
    type: "object"
    properties:
      name:
        type: "string"
        description: "Unique scenario name"
      config:
        $ref: "#/definitions/ScenarioConfig"
      deployment:
        $ref: "#/definitions/Deployment"
    description: "Scenario object"
    example: {}
  ScenarioConfig:
    type: "object"
    properties:
      visualization:
        type: "string"
        description: "Visualization configuration"
      other:
        type: "string"
        description: "Other scenario configuration"
    description: "Scenario configuration"
    example:
      visualization: "visualization"
      other: "other"
  Deployment:
    type: "object"
    properties:
      interDomainLatency:
        type: "integer"
        description: "Latency in ms between domains"
      interDomainLatencyVariation:
        type: "integer"
        description: "Latency variation in ms between domains"
      interDomainThroughput:
        type: "integer"
        description: "The limit of the traffic supported between domains"
      interDomainPacketLoss:
        type: "number"
        format: "double"
        description: "Packet lost (in terms of percentage) between domains"
      meta:
        type: "object"
        description: "Key/Value Pair Map (string, string)"
        additionalProperties:
          type: "string"
      userMeta:
        type: "object"
        description: "Key/Value Pair Map (string, string)"
        additionalProperties:
          type: "string"
      domains:
        type: "array"
        items:
          $ref: "#/definitions/Domain"
    description: "Network deployment object"
    example: {}
  Domain:
    type: "object"
    properties:
      id:
        type: "string"
        description: "Unique domain ID"
      name:
        type: "string"
        description: "Domain name"
      type:
        type: "string"
        description: "Domain type"
        enum:
        - "OPERATOR"
        - "PUBLIC"
      interZoneLatency:
        type: "integer"
        description: "Latency in ms between zones within domain"
      interZoneLatencyVariation:
        type: "integer"
        description: "Latency variation in ms between zones within domain"
      interZoneThroughput:
        type: "integer"
        description: "The limit of the traffic supported between zones within the\
          \ domain"
      interZonePacketLoss:
        type: "number"
        format: "double"
        description: "Packet lost (in terms of percentage) between zones within the\
          \ domain"
      meta:
        type: "object"
        description: "Key/Value Pair Map (string, string)"
        additionalProperties:
          type: "string"
      userMeta:
        type: "object"
        description: "Key/Value Pair Map (string, string)"
        additionalProperties:
          type: "string"
      zones:
        type: "array"
        items:
          $ref: "#/definitions/Zone"
    description: "Operator domain object"
    example: {}
  Zone:
    type: "object"
    properties:
      id:
        type: "string"
        description: "Unique zone ID"
      name:
        type: "string"
        description: "Zone name"
      type:
        type: "string"
        description: "Zone type"
        enum:
        - "ZONE"
        - "COMMON"
      interFogLatency:
        type: "integer"
        description: "Latency in ms between fog nodes (or PoAs) within zone"
      interFogLatencyVariation:
        type: "integer"
        description: "Latency variation in ms between fog nodes (or PoAs) within zone"
      interFogThroughput:
        type: "integer"
        description: "The limit of the traffic supported between fog nodes (or PoAs)\
          \ within the zone"
      interFogPacketLoss:
        type: "number"
        format: "double"
        description: "Packet lost (in terms of percentage) between fog nodes (or PoAs)\
          \ within the zone"
      interEdgeLatency:
        type: "integer"
        description: "Latency in ms between edge nodes within zone"
      interEdgeLatencyVariation:
        type: "integer"
        description: "Latency variation in ms between edge nodes within zone"
      interEdgeThroughput:
        type: "integer"
        description: "The limit of the traffic supported between edge nodes within\
          \ the zone"
      interEdgePacketLoss:
        type: "number"
        format: "double"
        description: "Packet lost (in terms of percentage) between edge nodes within\
          \ the zone"
      edgeFogLatency:
        type: "integer"
        description: "Latency in ms between fog nodes (or PoAs) and edge nodes within\
          \ zone"
      edgeFogLatencyVariation:
        type: "integer"
        description: "Latency variation in ms between fog nodes (or PoAs) and edge\
          \ nodes within zone"
      edgeFogThroughput:
        type: "integer"
        description: "The limit of the traffic supported between fog nodes (or PoAs)\
          \ and edge nodes within the zone"
      edgeFogPacketLoss:
        type: "number"
        format: "double"
        description: "Packet lost (in terms of percentage) between fog nodes (or PoAs)\
          \ and edge nodes within the zone"
      meta:
        type: "object"
        description: "Key/Value Pair Map (string, string)"
        additionalProperties:
          type: "string"
      userMeta:
        type: "object"
        description: "Key/Value Pair Map (string, string)"
        additionalProperties:
          type: "string"
      networkLocations:
        type: "array"
        items:
          $ref: "#/definitions/NetworkLocation"
    description: "Logical zone (MEC network) object"
    example: {}
  NetworkLocation:
    type: "object"
    properties:
      id:
        type: "string"
        description: "Unique network location ID"
      name:
        type: "string"
        description: "Network location name"
      type:
        type: "string"
        description: "Network location type"
        enum:
        - "POA"
        - "DEFAULT"
      terminalLinkLatency:
        type: "integer"
        description: "Latency in ms for all terminal links within network location"
      terminalLinkLatencyVariation:
        type: "integer"
        description: "Latency variation in ms for all terminal links within network\
          \ location"
      terminalLinkThroughput:
        type: "integer"
        description: "The limit of the traffic supported for all terminal links within\
          \ the network location"
      terminalLinkPacketLoss:
        type: "number"
        format: "double"
        description: "Packet lost (in terms of percentage) for all terminal links\
          \ within the network location"
      meta:
        type: "object"
        description: "Key/Value Pair Map (string, string)"
        additionalProperties:
          type: "string"
      userMeta:
        type: "object"
        description: "Key/Value Pair Map (string, string)"
        additionalProperties:
          type: "string"
      physicalLocations:
        type: "array"
        items:
          $ref: "#/definitions/PhysicalLocation"
    description: "Logical network location object"
    example: {}
  PhysicalLocation:
    type: "object"
    properties:
      id:
        type: "string"
        description: "Unique physical location ID"
      name:
        type: "string"
        description: "Physical location name"
      type:
        type: "string"
        description: "Physical location type"
        enum:
        - "UE"
        - "FOG"
        - "EDGE"
        - "CN"
        - "DC"
      isExternal:
        type: "boolean"
        description: "true: Physical location is external to MEEP\nfalse: Physical\
          \ location is internal to MEEP"
      networkLocationsInRange:
        type: "array"
        items:
          type: "string"
          description: "Names of network locations within range of physical location"
      meta:
        type: "object"
        description: "Key/Value Pair Map (string, string)"
        additionalProperties:
          type: "string"
      userMeta:
        type: "object"
        description: "Key/Value Pair Map (string, string)"
        additionalProperties:
          type: "string"
      processes:
        type: "array"
        items:
          $ref: "#/definitions/Process"
      linkLatency:
        type: "integer"
        description: "Latency in ms between the physical location and the network\
          \ (wired interface, air interface)"
      linkLatencyVariation:
        type: "integer"
        description: "Latency variation in ms between the physical location and the\
          \ network (wired interface, air interface)"
      linkThroughput:
        type: "integer"
        description: "The limit of the traffic supported between the physical location\
          \ and the network (wired interface, air interface)"
      linkPacketLoss:
        type: "number"
        format: "double"
        description: "Packet lost (in terms of percentage) between the physical location\
          \ and the network (wired interface, air interface)"
    description: "Physical location object"
    example: {}
  Process:
    type: "object"
    properties:
      id:
        type: "string"
        description: "Unique process ID"
      name:
        type: "string"
        description: "Process name"
      type:
        type: "string"
        description: "Process type"
        enum:
        - "UE-APP"
        - "EDGE-APP"
        - "MEC-SVC"
        - "CLOUD-APP"
      isExternal:
        type: "boolean"
        description: "true: process is external to MEEP\nfalse: process is internal\
          \ to MEEP"
      image:
        type: "string"
        description: "Docker image to deploy inside MEEP"
      environment:
        type: "string"
        description: "Environment variables using the format NAME=\"value\",NAME=\"\
          value\",NAME=\"value\""
      commandArguments:
        type: "string"
        description: "Arguments to command executable"
      commandExe:
        type: "string"
        description: "Executable to invoke at container start up"
      serviceConfig:
        $ref: "#/definitions/ServiceConfig"
      gpuConfig:
        $ref: "#/definitions/GpuConfig"
      externalConfig:
        $ref: "#/definitions/ExternalConfig"
      status:
        type: "string"
        description: "Process status"
      userChartLocation:
        type: "string"
        description: "Chart location for the deployment of the chart provided by the\
          \ user"
      userChartAlternateValues:
        type: "string"
        description: "Chart values.yaml file location for the deployment of the chart\
          \ provided by the user"
      userChartGroup:
        type: "string"
        description: "Chart supplemental information related to the group (service)"
      meta:
        type: "object"
        description: "Key/Value Pair Map (string, string)"
        additionalProperties:
          type: "string"
      userMeta:
        type: "object"
        description: "Key/Value Pair Map (string, string)"
        additionalProperties:
          type: "string"
      appLatency:
        type: "integer"
        description: "Latency in ms caused by the application"
      appLatencyVariation:
        type: "integer"
        description: "Latency variation in ms caused by the application"
      appThroughput:
        type: "integer"
        description: "The limit of the traffic supported by the application"
      appPacketLoss:
        type: "number"
        format: "double"
        description: "Packet lost (in terms of percentage) caused by the application"
      placementId:
        type: "string"
        description: "Identifier used for process placement in AdvantEDGE cluster"
    description: "Application or service object"
    example: {}
  ServiceConfig:
    type: "object"
    properties:
      name:
        type: "string"
        description: "Unique service name"
      meSvcName:
        type: "string"
        description: "Multi-Edge service name, if any"
      ports:
        type: "array"
        items:
          $ref: "#/definitions/ServicePort"
    description: "Service object"
    example: {}
  ServicePort:
    type: "object"
    properties:
      protocol:
        type: "string"
        description: "Protocol that the application is using (TCP or UDP)"
      port:
        type: "integer"
        description: "Port number that the service is listening on"
      externalPort:
        type: "integer"
        description: "External port number on which to expose the application (30000\
          \ - 32767)  <li>Only one application allowed per external port <li>Scenario\
          \ builder must configure to prevent conflicts\n"
    description: "Service port object"
    example: {}
  GpuConfig:
    type: "object"
    properties:
      type:
        type: "string"
        description: "Requested GPU type"
      count:
        type: "integer"
        description: "Number of GPUs requested"
    description: "GPU configuration object"
  ExternalConfig:
    type: "object"
    properties:
      ingressServiceMap:
        type: "array"
        items:
          $ref: "#/definitions/IngressService"
      egressServiceMap:
        type: "array"
        items:
          $ref: "#/definitions/EgressService"
    description: "External Process configuration.\nNOTE: Only valid if 'isExternal'\
      \ is set."
    example: {}
  IngressService:
    type: "object"
    properties:
      name:
        type: "string"
        description: "Service name (unique or multi-edge)"
      port:
        type: "integer"
        description: "Internal service port number"
      externalPort:
        type: "integer"
        description: "Externally-exposed unique service port in range (30000 - 32767)"
      protocol:
        type: "string"
        description: "Service protocol (TCP or UDP)"
    description: "Internal service exposed externally via specific port"
  EgressService:
    type: "object"
    properties:
      name:
        type: "string"
        description: "Service name"
      meSvcName:
        type: "string"
        description: "Multi-Edge service name, if any"
      ip:
        type: "string"
        description: "External node IP address"
      port:
        type: "integer"
        description: "Service port number"
      protocol:
        type: "string"
        description: "Service protocol (TCP or UDP)"
    description: "External service exposed internally via specific port"
  NodeServiceMaps:
    type: "object"
    properties:
      node:
        type: "string"
        description: "Unique external node identifier"
      ingressServiceMap:
        type: "array"
        items:
          $ref: "#/definitions/IngressService"
      egressServiceMap:
        type: "array"
        items:
          $ref: "#/definitions/EgressService"
    description: "Node-specific mapping of exposed internal & external services"
    example: {}
  EventList:
    type: "object"
    properties:
      events:
        type: "array"
        items:
          $ref: "#/definitions/Event"
    description: "Event list object"
    example: {}
  Event:
    type: "object"
    properties:
      name:
        type: "string"
        description: "Event name"
      type:
        type: "string"
        description: "Event type"
        enum:
        - "NETWORK-CHARACTERISTICS-UPDATE"
        - "MOBILITY"
        - "POAS-IN-RANGE"
        - "OTHER"
      eventNetworkCharacteristicsUpdate:
        $ref: "#/definitions/EventNetworkCharacteristicsUpdate"
      eventMobility:
        $ref: "#/definitions/EventMobility"
      eventPoasInRange:
        $ref: "#/definitions/EventPoasInRange"
      eventOther:
        $ref: "#/definitions/EventOther"
    description: "Event object"
    example:
      name: "name"
      type: "MOBILITY"
      eventMobility:
        elementName: "ue1"
        dest: "poa2"
  EventNetworkCharacteristicsUpdate:
    type: "object"
    properties:
      elementName:
        type: "string"
        description: "Name of the network element to be updated"
      elementType:
        type: "string"
        description: "Type of the network element to be updated"
        enum:
        - "OPERATOR"
        - "POA"
        - "SCENARIO"
        - "ZONE-INTER-EDGE"
        - "ZONE-INTER-FOG"
        - "ZONE-EDGE-FOG"
        - "EDGE"
        - "FOG"
        - "UE"
        - "DISTANT-CLOUD"
        - "UE-APP"
        - "EDGE-APP"
        - "CLOUD-APP"
      latency:
        type: "integer"
        description: "Latency in ms"
      latencyVariation:
        type: "integer"
        description: "Latency variation in ms"
      throughput:
        type: "integer"
        description: "Throughput limit"
      packetLoss:
        type: "number"
        format: "double"
        description: "Packet loss percentage"
    description: "Network Characteristics update Event object"
    example: {}
  EventMobility:
    type: "object"
    properties:
      elementName:
        type: "string"
        description: "Name of the network element to be updated"
      dest:
        type: "string"
        description: "Destination element identifier"
    description: "Mobility Event object"
    example:
      elementName: "ue1"
      dest: "poa2"
  EventPoasInRange:
    type: "object"
    properties:
      ue:
        type: "string"
        description: "UE identifier"
      poasInRange:
        type: "array"
        items:
          type: "string"
          description: "POAs visible to UE"
    description: "POAs In Range Event object"
    example:
      ue: "ue"
      poasInRange:
      - "poa1"
      - "poa2"
  EventOther:
    type: "object"
    properties:
      event:
        type: "string"
        description: "Other event string"
    description: "Other Event object"
    example:
      event: "event"
  Settings:
    type: "object"
    description: "MEEP settings - Key/Value Pair Map (string, string)"
    additionalProperties:
      type: "string"
  PodsStatus:
    type: "object"
    properties:
      podStatus:
        type: "array"
        items:
          $ref: "#/definitions/PodStatus"
    description: "List of all pods status"
    example: {}
  PodStatus:
    type: "object"
    properties:
      name:
        type: "string"
        description: "Pod name"
      namespace:
        type: "string"
        description: "Pod namespace"
      meepApp:
        type: "string"
        description: "Pod process name"
      meepOrigin:
        type: "string"
        description: "Pod origin(core, scenario)"
      meepScenario:
        type: "string"
        description: "Pod scenario name"
      phase:
        type: "string"
        description: "Pod phase"
      podInitialized:
        type: "string"
        description: "Pod initialized (true/false)"
      podReady:
        type: "string"
        description: "Pod ready (true/false)"
      podScheduled:
        type: "string"
        description: "Pod scheduled (true/false)"
      podUnschedulable:
        type: "string"
        description: "Pod unschedulable (true/false)"
      podConditionError:
        type: "string"
        description: "Pod error message"
      containerStatusesMsg:
        type: "string"
        description: "Failed container error message"
      nbOkContainers:
        type: "string"
        description: "Number of containers that are up"
      nbTotalContainers:
        type: "string"
        description: "Number of total containers in the pod"
      nbPodRestart:
        type: "string"
        description: "Number of container failures leading to pod restarts"
      logicalState:
        type: "string"
        description: "State that is mapping the kubernetes api state"
      startTime:
        type: "string"
        description: "Pod creation time"
    example:
      podStatus:
      - podName: "mypod"
        namespace: "default"
        meepApp: "pod1"
        meepOrigin: "scenario"
        meepScenario: "myScenario"
        phase: "Running"
        podInitialized: "True"
        podReady: "False"
        podScheduled: "True"
        podUnschedulable: "False"
        podConditionError: "containers with unready status: [myshel]"
        containerStatusesMsg: null
        nbOkContainers: "0"
        nbTotalContainers: "1"
        nbPodRestart: "15005"
        startTime: "2018-09-10 14:24:00 +0000 UTC"
parameters:
  Name:
    name: "name"
    in: "path"
    description: "Scenario name"
    required: true
    type: "string"
    x-exportParamName: "Name"
  Scenario:
    in: "body"
    name: "scenario"
    description: "Scenario to add to MEEP store"
    required: true
    schema:
      $ref: "http://localhost:8291/meep-model.yaml#/definitions/Scenario"
    x-exportParamName: "Scenario"
  EventType:
    name: "type"
    in: "path"
    description: "Event type"
    required: true
    type: "string"
    x-exportParamName: "Type_"
  Event:
    in: "body"
    name: "event"
    description: "Event to send to active scenario"
    required: true
    schema:
      $ref: "http://localhost:8291/meep-model.yaml#/definitions/Event"
    x-exportParamName: "Event"
  Settings:
    in: "body"
    name: "settings"
    description: "MEEP Settings"
    required: true
    schema:
      $ref: "http://localhost:8291/meep-model.yaml#/definitions/Settings"
    x-exportParamName: "Settings"
responses:
  Std200:
    description: "OK"
  Std201:
    description: "Created"
  Std202:
    description: "Accepted"
  Std204:
    description: "No content"
  Std304:
    description: "Not modified"
  Std400:
    description: "Bad request"
  Std401:
    description: "Not authorized"
  Std403:
    description: "Forbidden"
  Std404:
    description: "Not found"
  Std409:
    description: "Conflict"
  Std416:
    description: "Requested range not satisfiable"
  Std500:
    description: "Internal server error"
